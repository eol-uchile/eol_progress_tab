{"version":3,"sources":["webpack:///./src/progress_tab/hooks/useResizeIFrame.jsx","webpack:///./src/i18n/index.jsx","webpack:///./src/progress_tab/helpers/utils.jsx","webpack:///./src/progress_tab/helpers/getStudentData.jsx","webpack:///./src/progress_tab/hooks/useFetchStudentData.jsx","webpack:///./src/progress_tab/helpers/getCourseInfo.jsx","webpack:///./src/progress_tab/hooks/useFetchCourseInfo.jsx","webpack:///./src/progress_tab/components/AboutGrid.jsx","webpack:///./src/progress_tab/components/ProgressGrid.jsx","webpack:///./src/progress_tab/hooks/useShowDroppedSubsections.jsx","webpack:///./src/progress_tab/components/SubsectionItem.jsx","webpack:///./src/progress_tab/components/ProgressDetailGrid.jsx","webpack:///./src/progress_tab/hooks/useScrollDetail.jsx","webpack:///./src/progress_tab/helpers/generateCertificates.jsx","webpack:///./src/progress_tab/components/CertificateContainer.jsx","webpack:///./src/progress_tab/hooks/useHandleCertificates.jsx","webpack:///./src/progress_tab/ProgressTabPage.jsx","webpack:///./src/assets/favicon.ico","webpack:///./src/index.jsx"],"names":["lastHeight","lastWidth","messages","ar","arMessages","fr","ca","caMessages","he","id","pl","ru","th","uk","dispatchResizeMessage","event","eventType","type","newHeight","document","getElementById","offsetHeight","newWidth","offsetWidth","window","parent","postMessage","payload","width","height","referrer","scrollTo","date_format","date","Date","toLocaleString","getStudentData","courseId","userId","url","fetch","credentials","response","status","json","data","student_data","username","passed","final_grade_percent","Math","round","final_grade_scaled","toFixed","toString","category_grades","map","_category_grades","certificate_data","_certificate_data","title","msg","button_msg","button_method","c","category","weight","drop_count","min_count","dropped_message","_dropped_message","detail","length","grade_percent","grade_scaled","_detail","d","subsection","string","subsection_display_name","elt","createElement","innerHTML","innerText","due","undefined","show_problem_scores","attempted","total_earned","replace","total_possible","percent","total_percent","problem_scores","_problem_scores","score","earned","possible","count","detail_message","getCourseData","course_data","start_date","end_date","effort","grade_cutoff","min_grade_approval","display_name","toUpperCase","AboutGrid","React","memo","useState","loading","course","state","setState","useEffect","then","useFetchCourseInfo","help_href","encodeURI","className","Spinner","animation","variant","scope","OverlayTrigger","key","placement","overlay","Tooltip","href","target","Button","size","block","propTypes","PropTypes","isRequired","ProgressGrid","studentState","setCategoryGradeActive","categ","onClick","colSpan","object","func","SubsectionItem","Badge","index","ProgressDetailGrid","categoryGrade","subsections","sort","a","b","slice","forEach","classList","remove","useShowDroppedSubsections","ref","useRef","current","scrollIntoView","useScrollDetail","icon","faQuestionCircle","generateCertificates","getAuthenticatedHttpClient","post","catch","error","console","CertificateContainer","certificate","setStudentState","buttonDisabled","setButtonDisabled","prevState","called","now","useHandleCertificates","handleClick","certificateLogo","process","Alert","Image","src","fluid","Heading","disabled","ProgressTabPage","body","MutationObserver","observe","attributes","childList","subtree","addEventListener","removeEventListener","parameters","location","hash","split","pop","useFetchStudentData","categoryGradeActive","subscribe","APP_READY","ReactDOM","render","AppProvider","APP_INIT_ERROR","ErrorPage","message","initialize","appMessages"],"mappings":"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","file":"app.c84e185b2ff7b1a72648.js","sourcesContent":["import { useEffect } from 'react';\n\nvar lastHeight;\nvar lastWidth;\n\nexport const useResizeIFrame = () => {\n    useEffect(() => {\n        // Verify iframe\n        if (window !== window.parent) {\n            document.body.className += ' view-in-mfe';\n            lastHeight = window.offsetHeight;\n            lastWidth = window.offsetWidth;\n            // Create an observer instance linked to the callback function\n            const observer = new MutationObserver(dispatchResizeMessage);\n\n            // Start observing the target node for configured mutations\n            observer.observe(document.body, { attributes: true, childList: true, subtree: true });\n            window.addEventListener('load', dispatchResizeMessage);\n            window.addEventListener('resize', dispatchResizeMessage);\n        }\n        return () => {\n            window.removeEventListener('load', dispatchResizeMessage);\n            window.removeEventListener('resize', dispatchResizeMessage);\n        }\n    }, [ ]);\n    \n}\n\n\nconst dispatchResizeMessage = (event) => {\n    // Note: event is actually an Array of MutationRecord objects\n    // when fired from the MutationObserver\n    var eventType = event.type || 'mutate';\n    var newHeight = document.getElementById('content').offsetHeight;\n    var newWidth = document.getElementById('content').offsetWidth;\n\n    if (eventType !== 'load' && newWidth === lastWidth && newHeight === lastHeight) {\n        return;\n    }\n\n    window.parent.postMessage({\n        type: 'plugin.resize',\n        payload: {\n            width: newWidth,\n            height: newHeight,\n        }\n        }, document.referrer\n    );\n\n    lastHeight = newHeight;\n    lastWidth = newWidth;\n\n    // Within the learning microfrontend the iframe resizes to match the\n    // height of this document and it should never scroll. It does scroll\n    // ocassionally when javascript is used to focus elements on the page\n    // before the parent iframe has been resized to match the content\n    // height. This window.scrollTo is an attempt to keep the content at the\n    // top of the page. See TNL-7094\n    window.scrollTo(0, 0);\n}","import arMessages from './messages/ar.json';\nimport caMessages from './messages/ca.json';\n// no need to import en messages-- they are in the defaultMessage field\nimport es419Messages from './messages/es_419.json';\nimport frMessages from './messages/fr.json';\nimport zhcnMessages from './messages/zh_CN.json';\nimport heMessages from './messages/he.json';\nimport idMessages from './messages/id.json';\nimport kokrMessages from './messages/ko_kr.json';\nimport plMessages from './messages/pl.json';\nimport ptbrMessages from './messages/pt_br.json';\nimport ruMessages from './messages/ru.json';\nimport thMessages from './messages/th.json';\nimport ukMessages from './messages/uk.json';\n\nconst messages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  ca: caMessages,\n  he: heMessages,\n  id: idMessages,\n  'ko-kr': kokrMessages,\n  pl: plMessages,\n  'pt-br': ptbrMessages,\n  ru: ruMessages,\n  th: thMessages,\n  uk: ukMessages,\n};\n\nexport default messages;\n","/* \n* Get tab ids from URL \n*   e.g: /eol/eol_progress_tab/static#/eol/eol_progress_tab/static/course-v1:eol+prueba03+2020/1234\n*   course id will be course-v1:eol+prueba03+2020\n*   user id will be 1234\n*/\nexport const getTabIds = ( ) =>  {\n    const parameters = window.location.hash.split(/[\\/]+/);\n    const userId = parameters.pop();\n    const courseId = parameters.pop();\n    return [userId, courseId];\n}\n\nexport const date_format = date => (\n    (new Date(date)).toLocaleString('es-CL')\n)\n\nexport const unescapeHTML = string => {\n   var elt = document.createElement(\"span\");\n   elt.innerHTML = string;\n   return elt.innerText;\n}","import { date_format, unescapeHTML } from \"./utils\";\n\n// Get student data\nexport const getStudentData = async ( courseId, userId ) => {\n    const url = `/courses/${ courseId }/eol_progress_tab/student_data/${userId}/`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        const student_data = {\n            username            : data.username,\n            passed              : data.passed,\n            final_grade_percent : `${Math.round(data.final_grade_percent * 100)}%`,\n            final_grade_scaled  : data.final_grade_scaled.toFixed(1).toString(),\n            category_grades     : data.category_grades.map( _category_grades ),\n            certificate_data    : _certificate_data( data )\n        };\n        return student_data;\n    } else {\n        return {};\n    }\n}\n\nconst _certificate_data = data => ({\n    url : data.certificate_data?.url,\n    title : data.certificate_data?.title,\n    msg : data.certificate_data?.msg,\n    button_msg : data.certificate_data?.button_msg,\n    button_method : data.certificate_data?.button_method\n});\n\nconst _category_grades = c => ({\n    category        : c.category,\n    weight          : `${(c.weight * 100)}%`,\n    drop_count      : c.drop_count,\n    min_count       : c.min_count,\n    dropped_message : _dropped_message( c.detail.length - c.drop_count ),\n    grade_percent   : `${Math.round(c.grade_percent * 100)}%`,\n    grade_scaled    : c.grade_scaled.toFixed(1).toString(),\n    detail          : c.detail.map( _detail )\n});\n\nconst _detail = d => ({\n    subsection          : unescapeHTML(d.subsection_display_name),\n    due                 : d.due ? date_format(d.due) : undefined,\n    show_problem_scores : d.show_problem_scores,\n    attempted           : d.attempted,\n    url                 : d.url,\n    total_earned        : d.total_earned.toFixed(2).replace(/[.,]00$/, \"\"), // replace decimal .00 \n    total_possible      : d.total_possible,\n    percent             : `${Math.round(d.total_percent * 100)}%`,\n    problem_scores      : d.problem_scores.map( _problem_scores )\n});\n\nconst _problem_scores = score => ({\n    earned          : score.earned.toFixed(2).replace(/[.,]00$/, \"\"), // replace decimal .00 \n    possible        : score.possible\n});\n\nconst _dropped_message = count => {\n    const detail_message = count == 1 ? 'la mejor calificación' : `las ${count} mejores calificaciones`;\n    return `En esta evaluación se considera solo ${ detail_message }.`;\n}","import { useState, useEffect } from \"react\";\nimport { getStudentData } from \"../helpers/getStudentData\";\n\nexport const useFetchStudentData = ( courseId, userId ) => {\n    const [state, setState] = useState({\n        called      : Date.now(),\n        loading     : true,\n        student_data: {}\n    })\n\n    useEffect(() => {\n        getStudentData ( courseId, userId )\n        .then( student_data => {\n            setState({\n                ...state,\n                loading         : false,\n                student_data    : student_data\n            });\n        } );\n    }, [ state.called ])\n    return [state, setState];\n}\n","import { date_format } from \"./utils\";\n\n// Get course data\nexport const getCourseData = async ( courseId ) => {\n    const url = `/courses/${ courseId }/eol_progress_tab/course_info`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        const course_data = {\n            start_date          : data.start_date ? date_format(data.start_date) : 'Sin definir',\n            end_date            : data.end_date ? date_format(data.end_date) : 'Sin definir',\n            effort              : data.effort,\n            grade_cutoff        : `${(data.grade_cutoff * 100)}%`,\n            min_grade_approval  : data.min_grade_approval.toFixed(1).toString(),\n            display_name        : data.display_name.toUpperCase()\n        };\n        return course_data;\n    } else {\n        return {};\n    }\n}\n\n","import { useState, useEffect } from \"react\";\nimport { getCourseData } from \"../helpers/getCourseInfo\";\n\nexport const useFetchCourseInfo = ( courseId ) => {\n    const [state, setState] = useState({\n        loading: true,\n        course: {}\n    })\n\n    useEffect(() => {\n        getCourseData ( courseId )\n        .then( course_data => {\n            setState({\n                loading : false,\n                course  : course_data\n            });\n        } );\n    }, [ ])\n    return state;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Spinner, OverlayTrigger, Tooltip } from '@edx/paragon';\nimport { useFetchCourseInfo } from '../hooks/useFetchCourseInfo';\n\nexport const AboutGrid = React.memo(( { courseId } ) => {\n    const { course, loading } = useFetchCourseInfo( courseId );\n    const help_href = encodeURI(`/contact_form?course=${course.display_name}`);\n    return (\n        <div className=\"tab-grid shadow-lg bg-white p-3\">\n            <h4 className=\"text-center\">Información General</h4>\n            { loading && <Spinner animation=\"border\" variant=\"primary\" className=\"d-flex mx-auto mt-2 \"/> }\n            <table className=\"table table-borderless mb-0\">\n                <tbody>\n                    <tr>\n                        <th scope=\"row\" className=\"text-left\">Inicio de clases</th>\n                        <td className=\"text-right\">\n                            { course.start_date }\n                        </td>\n                    </tr>\n                    <tr>\n                        <th scope=\"row\" className=\"text-left\">Término de clases</th>\n                        <td className=\"text-right\">\n                            { course.end_date }\n                        </td>\n                    </tr>\n                    { \n                        (course.effort != 'None' && course.effort != '') && (\n                            <tr>\n                                <th scope=\"row\" className=\"text-left\">Esfuerzo estimado</th>\n                                <td className=\"text-right\">\n                                    { course.effort }\n                                </td>\n                            </tr>\n                        ) \n                    }\n                    <tr>\n                        <th scope=\"row\" className=\"text-left\">Calificación Mínima de Aprobación</th>\n                        <td className=\"text-right\">\n                            <OverlayTrigger\n                                key='final-grade-tooltip'\n                                placement='left'\n                                overlay={\n                                    <Tooltip id={`tooltip-final-grade`}>\n                                    Equivalente a una nota <strong>{ course.min_grade_approval }</strong>* aproximadamente (escala 1.0 - 7.0).\n                                    </Tooltip>\n                                }\n                            > \n                                <span>{ course.grade_cutoff }</span>\n                            </OverlayTrigger>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <a href={ help_href } target=\"_blank\">\n                <Button variant=\"primary\" size=\"sm\" block className=\"mx-auto\">\n                    ¿ Necesitas Ayuda ?\n                </Button>\n            </a>\n        </div>\n    )\n});\n\nAboutGrid.propTypes = {\n    courseId : PropTypes.string.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner, OverlayTrigger, Tooltip } from '@edx/paragon';\n\nexport const ProgressGrid = React.memo(( { studentState, setCategoryGradeActive } ) => {\n    const { student_data, loading } = studentState;\n    const handleClick = ( category_grade ) => {\n        setCategoryGradeActive(category_grade);\n    }\n    return (\n        <>\n        <div className=\"tab-grid progress-tab-grid shadow-lg bg-white p-3\">\n            <h4 className=\"text-center\">Calificaciones de '{student_data.username}'</h4>\n            { loading && <Spinner animation=\"border\" variant=\"primary\" className=\"d-flex mx-auto mt-2 \"/> }\n            <table className=\"table my-3\">\n                <thead className=\"thead-primary\">\n                    <tr>\n                        <th scope=\"col\">Evaluación</th>\n                        <th scope=\"col\">Peso</th>\n                        <th scope=\"col\">Calificación <br/>(0 - 100)%</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        student_data.category_grades?.map( categ => (\n                            <tr key={categ.category}\n                                onClick= { () => {\n                                    handleClick(categ);\n                                } }\n                            >\n                                <th>{categ.category}</th>\n                                <td>{categ.weight}</td>\n                                <OverlayTrigger\n                                    key='grade-tooltip'\n                                    placement='bottom'\n                                    overlay={\n                                        <Tooltip>\n                                        Equivalente a una nota <strong>{categ.grade_scaled}</strong>* aproximadamente (escala 1.0 - 7.0).\n                                        </Tooltip>\n                                    }\n                                > \n                                    <td>{categ.grade_percent}</td>\n                                </OverlayTrigger>\n                            </tr>\n                        ))\n                    }\n                    <tr className=\"table-footer\">\n                        <th scope=\"row\" colSpan=\"2\" className=\"text-right\">Promedio Final</th>\n                        <OverlayTrigger\n                            key='grade-tooltip'\n                            placement='bottom'\n                            overlay={\n                                <Tooltip>\n                                Equivalente a una nota <strong>{student_data.final_grade_scaled}</strong> aproximadamente (escala 1.0 - 7.0).\n                                </Tooltip>\n                            }\n                        >\n                            <td>{student_data.final_grade_percent}</td>\n                        </OverlayTrigger>\n                        \n                    </tr>\n                </tbody>\n            </table>\n            <p className=\"text-right text-muted small\">Haz clic en una evaluación para visualizar su progreso en detalle.</p>\n        </div>\n        </>\n    )\n});\n\nProgressGrid.propTypes = {\n    studentState            : PropTypes.object.isRequired,\n    setCategoryGradeActive  : PropTypes.func.isRequired\n}","import { useEffect } from \"react\";\n\nexport const useShowDroppedSubsections = ( categoryGrade ) => {\n    useEffect(() => {\n        // Show badge if category has drop_count and grades\n        if(categoryGrade.drop_count > 0 && categoryGrade.grade_percent != '0%'){\n            var subsections = [...categoryGrade.detail]; // Copy array without reference\n    \n            subsections.sort((a, b) => (a.total_earned / a.total_possible) - (b.total_earned / b.total_possible) );  // Sort asc\n            subsections = subsections.slice(0, categoryGrade.drop_count); // Filter the count of dropped subsections. Keep lowest grades\n    \n            subsections.forEach((subsection) => {\n                document.getElementById(`badge_${subsection.url}`).classList.remove(\"d-none\"); // Show 'dropped' badge\n            });\n        }\n\n    }, [ categoryGrade ]);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge, OverlayTrigger, Tooltip } from '@edx/paragon';\n\nexport const SubsectionItem = ( { detail, dropped_message }) => {\n    return (\n        <div>\n            <p className=\"font-weight-bold mb-0\">\n                <a href={ detail.url } target=\"_blank\" className=\"mr-2\">\n                    { detail.subsection }\n                </a>\n                { detail.show_problem_scores && <span>({ detail.total_earned }/{ detail.total_possible }) {detail.percent}</span> } \n                <OverlayTrigger\n                        key='final-grade-tooltip'\n                        placement='bottom'\n                        overlay={\n                            <Tooltip id={`tooltip-final-grade`}>\n                                { dropped_message }\n                            </Tooltip>\n                        }\n                    > \n                        <span className='d-none ml-2' id={ 'badge_' + detail.url }>\n                            <Badge variant=\"dark\">Excluida</Badge>\n                        </span>\n                </OverlayTrigger>\n            </p>\n            {\n                detail.due && (\n                    <p className=\"small text-italic mb-0\">Fecha límite: { detail.due }</p>\n                )\n            }\n            <dl className=\"mt-1\">\n                <dt>Puntuación de problemas:</dt>\n                { !detail.attempted && detail.show_problem_scores && <dd><i>No se registran respuestas</i></dd> }\n                { !detail.show_problem_scores && <dd><i>Puntuaciones de problemas son escondidas.</i></dd> }\n                {\n                    detail.attempted && detail.show_problem_scores && detail.problem_scores?.map( (score, index) => (\n                        <dd key={index}>\n                            { score.earned }/{ score.possible }\n                        </dd>\n                    ))\n                }\n            </dl>\n            <hr/>\n        </div>\n    )\n}\n\nSubsectionItem.propTypes = {\n    detail          : PropTypes.object.isRequired,\n    dropped_message : PropTypes.string.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useScrollDetail } from '../hooks/useScrollDetail';\nimport { useShowDroppedSubsections } from '../hooks/useShowDroppedSubsections';\nimport { SubsectionItem } from './SubsectionItem';\nimport { OverlayTrigger, Tooltip, Badge } from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport const ProgressDetailGrid = React.memo(( { categoryGrade } ) => {\n    useShowDroppedSubsections( categoryGrade );\n    const ref = useScrollDetail(categoryGrade);\n\n    return (\n        <div className=\"progress-detail shadow-lg bg-white p-3\" ref={ ref }>\n            <h4 className=\"text-center\">Progreso de Evaluación '{ categoryGrade.category }'</h4>\n            <p className=\"text-center font-weight-bold mb-0\">Calificación { categoryGrade.grade_percent } ≈ Nota { categoryGrade.grade_scaled }* </p>\n            { categoryGrade.min_count > categoryGrade.detail.length && (\n                <p className=\"text-center category-grade-info\">\n                    <OverlayTrigger\n                        key='category-grade-tooltip'\n                        placement='bottom'\n                        overlay={\n                            <Tooltip>\n                                En esta evaluación se promedian { categoryGrade.min_count } subsecciones. Espere a que el equipo docente publique el contenido faltante.\n                            </Tooltip>\n                        }\n                    > \n                        <Badge variant=\"info\" className=\"cursor-default\"><span className=\"badge-text\">Subsecciones pendientes: { categoryGrade.min_count - categoryGrade.detail.length }</span> <FontAwesomeIcon icon={faQuestionCircle} className=\"\"/></Badge>\n                    </OverlayTrigger>\n                </p>\n            )}\n            \n            { categoryGrade.detail.length == 0 && <p className=\"text-center text-muted\">Aún no se han configurado ejercicios en esta evaluación</p> }\n            { categoryGrade.detail.length > 0 && (\n                <>\n                    <p className=\"text-muted\">A continuación se muestran los puntajes (por subsección) obtenidos en los ejercicios con <u>calificación activada</u>. La puntuación por ejercicio se muestra en el formato: <em>'Puntaje obtenido' / 'Puntaje máximo posible'</em>.</p>\n                    {\n                        categoryGrade.detail?.map( detail => (\n                            <SubsectionItem detail={ detail } dropped_message={ categoryGrade.dropped_message } key={detail.url} />\n                        ))\n                    }\n                    { categoryGrade.drop_count > 0 && (\n                            <p className=\"text-right text-muted small\">\n                                { categoryGrade.dropped_message }\n                            </p>\n                        ) \n                    }\n                </>\n            ) }\n            \n        </div>\n    )\n});\n\nProgressDetailGrid.propTypes = {\n    categoryGrade : PropTypes.object.isRequired,\n}\n","import { useEffect, useRef } from \"react\"\n\nexport const useScrollDetail = ( category ) => {\n    const ref = useRef(null)\n    useEffect(() => {\n        ref.current.scrollIntoView();\n    }, [ category ])\n    return ref;\n}\n","import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport const generateCertificates = async( url ) => {\n    const status = await getAuthenticatedHttpClient()\n        .post(url)\n        .then(() => {\n            return true;\n        })\n        .catch( (error) => {\n            console.error(error);\n            return false;\n        });\n    return status;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Button, Image } from '@edx/paragon';\nimport { useHandleCertificates } from '../hooks/useHandleCertificates';\n\nexport const CertificateContainer = React.memo(( { certificate, setStudentState } ) => {\n    const { title, url, msg, button_msg, button_method } = certificate;\n    const [ buttonDisabled, handleClick ] = useHandleCertificates( url, setStudentState );\n    const certificateLogo = `${process.env.THEME_ASSETS_PATH}images/certificates/honor.png`;\n    return (\n        <Alert variant=\"success\">\n            <div className=\"row\">\n                <div className=\"col-lg-2 order-lg-12 p-3 m-auto text-center\">\n                    <Image src={ certificateLogo } fluid />\n                </div>\n                <div className=\"col-lg-10 order-lg-1 p-3\">\n                    <Alert.Heading>{ title } { }</Alert.Heading>\n                    <p>{ msg }</p>\n                    <hr />\n                    <div className=\"mb-0\">\n                        { \n                            button_method == 'GET' && (\n                                <a href={ url } target=\"_blank\">\n                                    <Button variant=\"success\" disabled={ url=='#' } >{ button_msg }</Button>\n                                </a>\n                            ) \n                        }\n                        {\n                            button_method == 'POST' && (\n                                <Button \n                                    variant=\"success\" \n                                    disabled={ buttonDisabled } \n                                    onClick= { handleClick } \n                                >\n                                    { button_msg }\n                                </Button>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n            \n        </Alert>\n    )\n});\n\nCertificateContainer.propTypes = {\n    certificate     : PropTypes.object.isRequired,\n    setStudentState : PropTypes.func.isRequired\n}","import { useState } from \"react\";\nimport { generateCertificates } from \"../helpers/generateCertificates\";\n\nexport const useHandleCertificates = ( url, setStudentState ) => {\n    const [buttonDisabled, setButtonDisabled] = useState(false);\n\n    const handleClick = () => {\n        setButtonDisabled(true);\n        generateCertificates(url)\n            .then((status) => {\n                if (status) {\n                    // trigger useEffect (useFetchStudentData) and update certificate url\n                    setStudentState((prevState) => ({\n                        ...prevState, \n                        called : Date.now(),\n                        loading: true\n                    }));\n                }\n                setButtonDisabled(false);\n            });\n    }\n\n    return [ buttonDisabled, handleClick ]\n\n}","import React, { useState } from \"react\";\n\nimport { useResizeIFrame } from \"./hooks/useResizeIFrame\";\nimport { useFetchStudentData } from './hooks/useFetchStudentData';\n\nimport { getTabIds } from \"./helpers/utils\";\n\nimport { AboutGrid } from \"./components/AboutGrid\";\nimport { ProgressGrid } from \"./components/ProgressGrid\";\nimport { ProgressDetailGrid } from \"./components/ProgressDetailGrid\";\nimport { CertificateContainer } from './components/CertificateContainer';\n\nexport default function ProgressTabPage() {\n  useResizeIFrame(); // Resize Iframe on height changes\n  const [userId, courseId] = getTabIds();\n  const [studentState, setStudentState] = useFetchStudentData( courseId, userId );\n  const [categoryGradeActive, setCategoryGradeActive] = useState({});\n  return (\n    <div id=\"content\" className=\"container\">\n      { \n        studentState.student_data.certificate_data?.url && (\n          <CertificateContainer certificate={studentState.student_data.certificate_data} setStudentState={setStudentState} />\n        )  \n      }\n      <div className=\"row\">\n        <div className=\"col-xl-5 order-xl-12 p-3\">\n          <AboutGrid courseId={ courseId } />\n        </div>\n        <div className=\"col-xl-7 order-xl-1 p-3\">\n          <ProgressGrid studentState={ studentState } setCategoryGradeActive={ setCategoryGradeActive }/>\n        </div>\n      </div>\n      {\n        categoryGradeActive?.category && (\n          <div className=\"row\">\n            <div className=\"col-12 p-3\">\n              <ProgressDetailGrid categoryGrade={ categoryGradeActive }/>\n            </div>\n          </div>\n        )\n      }\n      <p className=\"text-right text-muted small mt-3\">(*) Las notas con escala 1.0 a 7.0 son <u>aproximaciones</u> calculadas en base a las calificaciones con escala 0% a 100%.</p>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"favicon.ico\";","import 'babel-polyfill';\n\nimport {\n  APP_INIT_ERROR, APP_READY, subscribe, initialize,\n} from '@edx/frontend-platform';\nimport { AppProvider, ErrorPage } from '@edx/frontend-platform/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport appMessages from './i18n';\nimport ProgressTabPage from './progress_tab/ProgressTabPage';\n\nimport './index.scss';\nimport './assets/favicon.ico';\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    <AppProvider>\n      <ProgressTabPage />\n    </AppProvider>,\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  messages: [\n    appMessages,\n  ],\n});\n"],"sourceRoot":""}